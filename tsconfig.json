{
  /** ts 编译的配置  **/
  "compilerOptions": {
    /** ts 由于我要使用 tsx 所以需要指明  **/
    "jsx": "react-jsx",

    // 使 TypeScript 可以更好地与 CommonJS 模块兼容。在使用 CommonJS 模块系统时，导出的模块将会被包装在一个对象中，这是因为 CommonJS 使用的是类似于 module.exports 的语法来导出模块。
    // 而某些工具和库可能需要以 ES6 模块的方式导入这些 CommonJS 模块，这时候就可以开启 esModuleInterop 选项。
    // 开启后，在导入 CommonJS 模块时不需要再使用默认导出才能正确引入，也不需要手动处理 require() 和 module.exports。
    // 这使得导入和使用 CommonJS 模块的过程变得更加简洁方便。
    "esModuleInterop": true,

    // 项目中使用了 @ 符号 需要告诉ts @符号代表的是什么路径
    "baseUrl": "./",
    "paths": {
      "@/*": ["src/*"],
      "#/*": ["types/*"]
    },

    // 配置 ts 的类型声明文件 这样在引入 import xx from "*.png" 时能够找到对应的类型
    "types": ["vite/client"],

    // 动态导入时 lazy(() => import("@/pages/sys/login/Login")), 提示需要 es2015
    "lib": ["es2015", "DOM"],

    // 使用的模块系统类型。ESNext 支持更多特性，比如动态导入等。 import.meta
    "module": "ESNext",
    //
    "moduleResolution": "Bundler"
  },
  "include": ["src", "types"],
  "exclude": ["node_modules", "dist"]
}
